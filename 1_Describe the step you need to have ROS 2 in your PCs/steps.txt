To install ROS 2 on our PC running Ubuntu 24.04, follow these general steps:

I followed the documentation for ROS2 jazzy at: https://docs.ros.org/en/jazzy/Installation/Alternatives/Ubuntu-Development-Setup.html

Step 1:-System setup
Set locale
Make sure you have a locale which supports UTF-8. If you are in a minimal environment (such as a docker container), the locale may be something minimal like POSIX. We test with the following settings. However, it should be fine if you’re using a different UTF-8 supported locale.
        <code>
        locale  # check for UTF-8
        

        xyz

        
        sudo apt update && sudo apt install locales
        sudo locale-gen en_US en_US.UTF-8
        sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
        export LANG=en_US.UTF-8

        locale  # verify settings
        </code>

Step 2:-Enable required repositories
We will need to add the ROS 2 apt repository to your system.
First ensure that the Ubuntu Universe repository is enabled.

        <code>
        sudo apt install software-properties-common
        sudo add-apt-repository universe
        </code>

    Now add the ROS 2 GPG key with apt.
        <code>
        sudo apt update && sudo apt install curl -y
        sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
        </code>

    Then add the repository to your sources list.
        <code>
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http:/
        </code>

Step 3:-Install development tools

        <code>
        sudo apt update && sudo apt install -y \
        python3-flake8-blind-except \
        python3-flake8-class-newline \
        python3-flake8-deprecated \
        python3-mypy \
        python3-pip \
        python3-pytest \
        python3-pytest-cov \
        python3-pytest-mock \
        python3-pytest-repeat \
        python3-pytest-rerunfailures \
        python3-pytest-runner \
        python3-pytest-timeout \
        ros-dev-tools
        </code>

Step 4:-Build ROS 2
Get ROS 2 code
Create a workspace and clone all repos:
        <code>
        mkdir -p ~/ros2_jazzy/src
        cd ~/ros2_jazzy
        vcs import --input https://raw.githubusercontent.com/ros2/ros2/jazzy/ros2.repos src
        </code>

Step 5:-Install dependencies using rosdep
ROS 2 packages are built on frequently updated Ubuntu systems. It is always recommended that you ensure your system is up to date before installing new packages.
        <code>
        sudo apt upgrade
        sudo rosdep init
        rosdep update
        rosdep install --from-paths src --ignore-src -y --skip-keys "fastcdr rti-connext-dds-6.0.1 urdfdom_headers"
        </code>

Step 6:-(optional)
Install additional RMW implementations (optional)
The default middleware that ROS 2 uses is Fast DDS, but the middleware (RMW) can be replaced at build or runtime. See the guide on how to work with multiple RMWs.
        <code>
        cd ~/ros2_jazzy/
        colcon build --symlink-install
        </code>

Step 7:-Setup environment
Set up your environment by sourcing the following file.
        <code>
        # Replace ".bash" with your shell if you're not using bash
        # Possible values are: setup.bash, setup.sh, setup.zsh
        . ~/ros2_jazzy/install/local_setup.bash
        </code>

//////////////////////////////////////////////////////////////////////////////

Now to verify the operationing of ROS2 setup we try a basic setup of listener and talker node:
In one terminal, source the setup file and then run a C++ talker:
        <code (C++)>
        . ~/ros2_jazzy/install/local_setup.bash
        ros2 run demo_nodes_cpp talker
        </code>

In another terminal source the setup file and then run a Python listener:
        <code (C++)> 
        . ~/ros2_jazzy/install/local_setup.bash
        ros2 run demo_nodes_py listener
        </code>

you should see the talker saying that it’s Publishing messages and the listener saying I heard those messages. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Remarks: the <code></code> portion is supposedd to be pasted/entered in the terminal